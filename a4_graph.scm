(define (make-graph)
    (define graph '())
    (define (add-node x)
      (cond ((eq? (checkNodeExists x graph) #f) (set! graph (cons (cons x '()) graph)) #t)
            (else #f)
          )
        )
    (define (checkNodeExists nodeToFind graphToCheck)
      (cond ((null? graphToCheck) #f)
            ((eq? nodeToFind (car (car graphToCheck))) #t)
            (else(checkNodeExists nodeToFind (cdr graphToCheck)))
            )
      

      )
    (define (add-edge x y)
      (cond ((and (eq? (checkNodeExists x graph) #t) (eq? (checkNodeExists y graph) #t))  (add-edge-to-node x y graph) #t)
            (else #f)
          )
      
        )
    (define (add-edge-to-node nodeToAddEdgeTo EdgeTo graphToCheck)
      (cond ((null? graphToCheck) #f)
            ((eq? (car (car graphToCheck)) nodeToAddEdgeTo)
             (cond ((null? (cdr (car graphToCheck))) (set! graph (add-modified-node-to-graph nodeToAddEdgeTo (cons (car (car graphToCheck)) (list (append (cdr (car graphToCheck)) (list EdgeTo)))) graph)))
                   (else (set! graph (add-modified-node-to-graph nodeToAddEdgeTo (cons (car (car graphToCheck)) (list (append (car (cdr (car graphToCheck))) (list EdgeTo)))) graph))))
             #t
             )
            (else (add-edge-to-node nodeToAddEdgeTo EdgeTo (cdr graphToCheck)))
            )
      )
    (define (add-modified-node-to-graph nodeToAddEdgeTo modifiedNode graphToModify)
      (cond ((null? graphToModify) #f)
            ((eq? (car (car graphToModify)) nodeToAddEdgeTo)
             (cons modifiedNode (cdr graphToModify))
             )
            (else (cons (car graphToModify) (add-modified-node-to-graph nodeToAddEdgeTo modifiedNode (cdr graphToModify))))
            )
      )
    (define (remove-node x)
      (cond ((eq? (checkNodeExists x graph) #t)
             (remove-all-edges-from-node x graph)
             (remove-all-mentions-of-node x graph)
             (set! graph (remove-actual-node x graph)) #t)
            (else #f)))
  
  (define (remove-actual-node x graphUsed)
    (cond ((null? graphUsed) '())
            ((eq? x (car (car graphUsed)))  (remove-actual-node x (cdr graphUsed)))
            (else (cons (car graphUsed)(remove-actual-node x (cdr graphUsed))))
            )
    )

  (define (remove-all-mentions-of-node nodeToRemove graphToRemoveNodeFrom)
    (cond ((null? graphToRemoveNodeFrom) '())
          ((null? (cdr (car graphToRemoveNodeFrom))) (remove-all-mentions-of-node nodeToRemove (cdr graphToRemoveNodeFrom)))
          (else
               (remove-edge-to-node (car (car graphToRemoveNodeFrom)) nodeToRemove graph)
               (remove-all-mentions-of-node nodeToRemove (cdr graphToRemoveNodeFrom)))
            )
    )
  
  
    (define (remove-all-edges-from-node x graphToRemoveEdges)
      (cond ((null? graphToRemoveEdges) #f)
            ((eq? (car (car graphToRemoveEdges)) x)
             (cond ((null? (cdr (car graphToRemoveEdges))) #t)
                        (else (remove-all-edges x (car (cdr (car graphToRemoveEdges))))))
             
             )
            (else (remove-all-edges-from-node x (cdr graphToRemoveEdges)))
            ))

  (define (remove-all-edges nodeName Edges)
    (cond ((null? Edges) '())
            (else
             (remove-edge nodeName (car Edges))
             (remove-edge (car Edges) nodeName)
             (remove-all-edges nodeName (cdr Edges))))
            
    )
  
    (define (remove-edge x y)
      (cond ((and (eq? (checkNodeExists x graph) #t) (eq? (checkNodeExists y graph) #t))  (remove-edge-to-node y x graph) (remove-edge-to-node x y graph) #t)
            (else #f)
          )
        )
    (define (remove-edge-to-node nodeToRemoveEdgeFrom EdgeToRemove graphToCheck)
      
      (cond ((null? graphToCheck) #f)
            ((eq? (car (car graphToCheck)) nodeToRemoveEdgeFrom)
             (cond ((eq? (null?  (cdr (car graphToCheck))) #t) #f)
                   (else (cond ((eq? (checkIfEdgeInNode EdgeToRemove (car (cdr (car graphToCheck)))) #t) (set! graph (add-modified-node-to-graph (car (car graphToCheck)) (cons (car (car graphToCheck)) (list (remove-edge-from-set-of-edges (car (cdr (car graphToCheck))) EdgeToRemove))) graph)) #t)
                   (else (remove-edge-to-node nodeToRemoveEdgeFrom EdgeToRemove (cdr graphToCheck))))))
             )
            (else (remove-edge-to-node nodeToRemoveEdgeFrom EdgeToRemove (cdr graphToCheck)))
            )
      )

   (define (remove-edge-from-set-of-edges set-Of-Edges EdgeToRemove)
     
     (cond ((null? set-Of-Edges) '())
            ((eq? (car set-Of-Edges) EdgeToRemove) (remove-edge-from-set-of-edges (cdr set-Of-Edges) EdgeToRemove))
            (else (cons (car set-Of-Edges) (remove-edge-from-set-of-edges (cdr set-Of-Edges) EdgeToRemove))
            ))
     
     )
   (define (checkIfEdgeInNode EdgeToRemove Edges)
    
     (cond ((null? Edges) #f)
            ((eq? (car Edges) EdgeToRemove)#t)
            (else (checkIfEdgeInNode EdgeToRemove (cdr Edges)))
            )
     )
  (define (mydisplay) (printLine graph))
  
  (define (printLine graphToPrint)
    
    (cond ((null? graphToPrint) (display "\n"))
            (else (display "\n")
                  (display (car (car graphToPrint)))
                  (display ":")
               
                  (cond ((null? (cdr (car graphToPrint))) (printLine (cdr graphToPrint)))
                        (else (printEdges (car (cdr (car graphToPrint))))(printLine (cdr graphToPrint))))
                  
                  
                  
                  )
            )
   
    )
  (define (printEdges edges)
    (cond ((null? edges) '())
            (else
                  (display (car edges))
                  (display " ")
                  (printEdges (cdr edges)))
            ))

    (define (dispatch method)
      (display method)
        (cond ((eq? method 'add-node) add-node)
              ((eq? method 'add-edge) add-edge)
              ((eq? method 'remove-node) remove-node)
              ((eq? method 'display) mydisplay)
              ((eq? method 'remove-edge) remove-edge)
			  (else (lambda() (display "Unknown Request: ")
			                  (display method)(newline)))))
    dispatch)

(define G (make-graph))
((G 'add-node) 'a)
((G 'add-node) 'b)
((G 'add-node) 'c)
((G 'add-node) 'a)
((G 'add-edge) 'a 'b)
((G 'add-edge) 'a 'c)
((G 'add-edge) 'b 'b)
((G 'add-edge) 'b 'c)
((G 'add-edge) 'c 'd)
((G 'display))
((G 'remove-edge) 'a 'c)
((G 'remove-node) 'c)
((G 'display)) 